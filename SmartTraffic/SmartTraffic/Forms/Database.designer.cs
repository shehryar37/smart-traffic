#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartTraffic.Forms
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SmartTrafficDB")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblCategory(tblCategory instance);
    partial void UpdatetblCategory(tblCategory instance);
    partial void DeletetblCategory(tblCategory instance);
    partial void InserttblUserType(tblUserType instance);
    partial void UpdatetblUserType(tblUserType instance);
    partial void DeletetblUserType(tblUserType instance);
    partial void InserttblComplaint(tblComplaint instance);
    partial void UpdatetblComplaint(tblComplaint instance);
    partial void DeletetblComplaint(tblComplaint instance);
    partial void InserttblEmergency(tblEmergency instance);
    partial void UpdatetblEmergency(tblEmergency instance);
    partial void DeletetblEmergency(tblEmergency instance);
    partial void InserttblFeedback(tblFeedback instance);
    partial void UpdatetblFeedback(tblFeedback instance);
    partial void DeletetblFeedback(tblFeedback instance);
    partial void InserttblNotification(tblNotification instance);
    partial void UpdatetblNotification(tblNotification instance);
    partial void DeletetblNotification(tblNotification instance);
    partial void InserttblSession(tblSession instance);
    partial void UpdatetblSession(tblSession instance);
    partial void DeletetblSession(tblSession instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SmartTrafficDBConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblCategory> tblCategories
		{
			get
			{
				return this.GetTable<tblCategory>();
			}
		}
		
		public System.Data.Linq.Table<tblUserType> tblUserTypes
		{
			get
			{
				return this.GetTable<tblUserType>();
			}
		}
		
		public System.Data.Linq.Table<tblComplaint> tblComplaints
		{
			get
			{
				return this.GetTable<tblComplaint>();
			}
		}
		
		public System.Data.Linq.Table<tblEmergency> tblEmergencies
		{
			get
			{
				return this.GetTable<tblEmergency>();
			}
		}
		
		public System.Data.Linq.Table<tblFeedback> tblFeedbacks
		{
			get
			{
				return this.GetTable<tblFeedback>();
			}
		}
		
		public System.Data.Linq.Table<tblNotification> tblNotifications
		{
			get
			{
				return this.GetTable<tblNotification>();
			}
		}
		
		public System.Data.Linq.Table<tblSession> tblSessions
		{
			get
			{
				return this.GetTable<tblSession>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCategory")]
	public partial class tblCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<tblComplaint> _tblComplaints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public tblCategory()
		{
			this._tblComplaints = new EntitySet<tblComplaint>(new Action<tblComplaint>(this.attach_tblComplaints), new Action<tblComplaint>(this.detach_tblComplaints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCategory_tblComplaint", Storage="_tblComplaints", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<tblComplaint> tblComplaints
		{
			get
			{
				return this._tblComplaints;
			}
			set
			{
				this._tblComplaints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblComplaints(tblComplaint entity)
		{
			this.SendPropertyChanging();
			entity.tblCategory = this;
		}
		
		private void detach_tblComplaints(tblComplaint entity)
		{
			this.SendPropertyChanging();
			entity.tblCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUserType")]
	public partial class tblUserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserTypeID;
		
		private string _UserTypeName;
		
		private EntitySet<tblUser> _tblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    partial void OnUserTypeNameChanging(string value);
    partial void OnUserTypeNameChanged();
    #endregion
		
		public tblUserType()
		{
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserTypeName
		{
			get
			{
				return this._UserTypeName;
			}
			set
			{
				if ((this._UserTypeName != value))
				{
					this.OnUserTypeNameChanging(value);
					this.SendPropertyChanging();
					this._UserTypeName = value;
					this.SendPropertyChanged("UserTypeName");
					this.OnUserTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUserType_tblUser", Storage="_tblUsers", ThisKey="UserTypeID", OtherKey="UserTypeID")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblUserType = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblUserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblComplaint")]
	public partial class tblComplaint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComplaintID;
		
		private string _ComplaintTitle;
		
		private string _ComplaintDescription;
		
		private int _CategoryID;
		
		private long _UserID;
		
		private string _ComplaintStatus;
		
		private System.DateTime _ComplaintDate;
		
		private bool _IsSeen;
		
		private EntityRef<tblCategory> _tblCategory;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComplaintIDChanging(int value);
    partial void OnComplaintIDChanged();
    partial void OnComplaintTitleChanging(string value);
    partial void OnComplaintTitleChanged();
    partial void OnComplaintDescriptionChanging(string value);
    partial void OnComplaintDescriptionChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnComplaintStatusChanging(string value);
    partial void OnComplaintStatusChanged();
    partial void OnComplaintDateChanging(System.DateTime value);
    partial void OnComplaintDateChanged();
    partial void OnIsSeenChanging(bool value);
    partial void OnIsSeenChanged();
    #endregion
		
		public tblComplaint()
		{
			this._tblCategory = default(EntityRef<tblCategory>);
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplaintID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComplaintID
		{
			get
			{
				return this._ComplaintID;
			}
			set
			{
				if ((this._ComplaintID != value))
				{
					this.OnComplaintIDChanging(value);
					this.SendPropertyChanging();
					this._ComplaintID = value;
					this.SendPropertyChanged("ComplaintID");
					this.OnComplaintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplaintTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ComplaintTitle
		{
			get
			{
				return this._ComplaintTitle;
			}
			set
			{
				if ((this._ComplaintTitle != value))
				{
					this.OnComplaintTitleChanging(value);
					this.SendPropertyChanging();
					this._ComplaintTitle = value;
					this.SendPropertyChanged("ComplaintTitle");
					this.OnComplaintTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplaintDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ComplaintDescription
		{
			get
			{
				return this._ComplaintDescription;
			}
			set
			{
				if ((this._ComplaintDescription != value))
				{
					this.OnComplaintDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ComplaintDescription = value;
					this.SendPropertyChanged("ComplaintDescription");
					this.OnComplaintDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._tblCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplaintStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ComplaintStatus
		{
			get
			{
				return this._ComplaintStatus;
			}
			set
			{
				if ((this._ComplaintStatus != value))
				{
					this.OnComplaintStatusChanging(value);
					this.SendPropertyChanging();
					this._ComplaintStatus = value;
					this.SendPropertyChanged("ComplaintStatus");
					this.OnComplaintStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplaintDate", DbType="DateTime NOT NULL")]
		public System.DateTime ComplaintDate
		{
			get
			{
				return this._ComplaintDate;
			}
			set
			{
				if ((this._ComplaintDate != value))
				{
					this.OnComplaintDateChanging(value);
					this.SendPropertyChanging();
					this._ComplaintDate = value;
					this.SendPropertyChanged("ComplaintDate");
					this.OnComplaintDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSeen", DbType="Bit NOT NULL")]
		public bool IsSeen
		{
			get
			{
				return this._IsSeen;
			}
			set
			{
				if ((this._IsSeen != value))
				{
					this.OnIsSeenChanging(value);
					this.SendPropertyChanging();
					this._IsSeen = value;
					this.SendPropertyChanged("IsSeen");
					this.OnIsSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCategory_tblComplaint", Storage="_tblCategory", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public tblCategory tblCategory
		{
			get
			{
				return this._tblCategory.Entity;
			}
			set
			{
				tblCategory previousValue = this._tblCategory.Entity;
				if (((previousValue != value) 
							|| (this._tblCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCategory.Entity = null;
						previousValue.tblComplaints.Remove(this);
					}
					this._tblCategory.Entity = value;
					if ((value != null))
					{
						value.tblComplaints.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("tblCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblComplaint", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblComplaints.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblComplaints.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEmergency")]
	public partial class tblEmergency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmergencyID;
		
		private string _EmergencyTitle;
		
		private long _UserID;
		
		private string _EmergencyStatus;
		
		private double _EmergencyLatitude;
		
		private double _EmergencyLongitude;
		
		private bool _IsSeen;
		
		private System.DateTime _EmergencyDate;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmergencyIDChanging(int value);
    partial void OnEmergencyIDChanged();
    partial void OnEmergencyTitleChanging(string value);
    partial void OnEmergencyTitleChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnEmergencyStatusChanging(string value);
    partial void OnEmergencyStatusChanged();
    partial void OnEmergencyLatitudeChanging(double value);
    partial void OnEmergencyLatitudeChanged();
    partial void OnEmergencyLongitudeChanging(double value);
    partial void OnEmergencyLongitudeChanged();
    partial void OnIsSeenChanging(bool value);
    partial void OnIsSeenChanged();
    partial void OnEmergencyDateChanging(System.DateTime value);
    partial void OnEmergencyDateChanged();
    #endregion
		
		public tblEmergency()
		{
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmergencyID
		{
			get
			{
				return this._EmergencyID;
			}
			set
			{
				if ((this._EmergencyID != value))
				{
					this.OnEmergencyIDChanging(value);
					this.SendPropertyChanging();
					this._EmergencyID = value;
					this.SendPropertyChanged("EmergencyID");
					this.OnEmergencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmergencyTitle
		{
			get
			{
				return this._EmergencyTitle;
			}
			set
			{
				if ((this._EmergencyTitle != value))
				{
					this.OnEmergencyTitleChanging(value);
					this.SendPropertyChanging();
					this._EmergencyTitle = value;
					this.SendPropertyChanged("EmergencyTitle");
					this.OnEmergencyTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmergencyStatus
		{
			get
			{
				return this._EmergencyStatus;
			}
			set
			{
				if ((this._EmergencyStatus != value))
				{
					this.OnEmergencyStatusChanging(value);
					this.SendPropertyChanging();
					this._EmergencyStatus = value;
					this.SendPropertyChanged("EmergencyStatus");
					this.OnEmergencyStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyLatitude", DbType="Float NOT NULL")]
		public double EmergencyLatitude
		{
			get
			{
				return this._EmergencyLatitude;
			}
			set
			{
				if ((this._EmergencyLatitude != value))
				{
					this.OnEmergencyLatitudeChanging(value);
					this.SendPropertyChanging();
					this._EmergencyLatitude = value;
					this.SendPropertyChanged("EmergencyLatitude");
					this.OnEmergencyLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyLongitude", DbType="Float NOT NULL")]
		public double EmergencyLongitude
		{
			get
			{
				return this._EmergencyLongitude;
			}
			set
			{
				if ((this._EmergencyLongitude != value))
				{
					this.OnEmergencyLongitudeChanging(value);
					this.SendPropertyChanging();
					this._EmergencyLongitude = value;
					this.SendPropertyChanged("EmergencyLongitude");
					this.OnEmergencyLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSeen", DbType="Bit NOT NULL")]
		public bool IsSeen
		{
			get
			{
				return this._IsSeen;
			}
			set
			{
				if ((this._IsSeen != value))
				{
					this.OnIsSeenChanging(value);
					this.SendPropertyChanging();
					this._IsSeen = value;
					this.SendPropertyChanged("IsSeen");
					this.OnIsSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyDate", DbType="DateTime NOT NULL")]
		public System.DateTime EmergencyDate
		{
			get
			{
				return this._EmergencyDate;
			}
			set
			{
				if ((this._EmergencyDate != value))
				{
					this.OnEmergencyDateChanging(value);
					this.SendPropertyChanging();
					this._EmergencyDate = value;
					this.SendPropertyChanged("EmergencyDate");
					this.OnEmergencyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblEmergency", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblEmergencies.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblEmergencies.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblFeedback")]
	public partial class tblFeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeedbackID;
		
		private long _UserID;
		
		private System.DateTime _FeedbackDate;
		
		private string _FeedbackDescription;
		
		private bool _IsSeen;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackIDChanging(int value);
    partial void OnFeedbackIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnFeedbackDateChanging(System.DateTime value);
    partial void OnFeedbackDateChanged();
    partial void OnFeedbackDescriptionChanging(string value);
    partial void OnFeedbackDescriptionChanged();
    partial void OnIsSeenChanging(bool value);
    partial void OnIsSeenChanged();
    #endregion
		
		public tblFeedback()
		{
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeedbackID
		{
			get
			{
				return this._FeedbackID;
			}
			set
			{
				if ((this._FeedbackID != value))
				{
					this.OnFeedbackIDChanging(value);
					this.SendPropertyChanging();
					this._FeedbackID = value;
					this.SendPropertyChanged("FeedbackID");
					this.OnFeedbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackDate", DbType="DateTime NOT NULL")]
		public System.DateTime FeedbackDate
		{
			get
			{
				return this._FeedbackDate;
			}
			set
			{
				if ((this._FeedbackDate != value))
				{
					this.OnFeedbackDateChanging(value);
					this.SendPropertyChanging();
					this._FeedbackDate = value;
					this.SendPropertyChanged("FeedbackDate");
					this.OnFeedbackDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FeedbackDescription
		{
			get
			{
				return this._FeedbackDescription;
			}
			set
			{
				if ((this._FeedbackDescription != value))
				{
					this.OnFeedbackDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FeedbackDescription = value;
					this.SendPropertyChanged("FeedbackDescription");
					this.OnFeedbackDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSeen", DbType="Bit NOT NULL")]
		public bool IsSeen
		{
			get
			{
				return this._IsSeen;
			}
			set
			{
				if ((this._IsSeen != value))
				{
					this.OnIsSeenChanging(value);
					this.SendPropertyChanging();
					this._IsSeen = value;
					this.SendPropertyChanged("IsSeen");
					this.OnIsSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblFeedback", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblFeedbacks.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblFeedbacks.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblNotification")]
	public partial class tblNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationID;
		
		private string _NotificationMessage;
		
		private System.DateTime _NotificationDateTime;
		
		private string _NotificationType;
		
		private string _NotificationLink;
		
		private bool _IsSeen;
		
		private System.Nullable<long> _UserID;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIDChanging(int value);
    partial void OnNotificationIDChanged();
    partial void OnNotificationMessageChanging(string value);
    partial void OnNotificationMessageChanged();
    partial void OnNotificationDateTimeChanging(System.DateTime value);
    partial void OnNotificationDateTimeChanged();
    partial void OnNotificationTypeChanging(string value);
    partial void OnNotificationTypeChanged();
    partial void OnNotificationLinkChanging(string value);
    partial void OnNotificationLinkChanged();
    partial void OnIsSeenChanging(bool value);
    partial void OnIsSeenChanged();
    partial void OnUserIDChanging(System.Nullable<long> value);
    partial void OnUserIDChanged();
    #endregion
		
		public tblNotification()
		{
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationID
		{
			get
			{
				return this._NotificationID;
			}
			set
			{
				if ((this._NotificationID != value))
				{
					this.OnNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._NotificationID = value;
					this.SendPropertyChanged("NotificationID");
					this.OnNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationMessage", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NotificationMessage
		{
			get
			{
				return this._NotificationMessage;
			}
			set
			{
				if ((this._NotificationMessage != value))
				{
					this.OnNotificationMessageChanging(value);
					this.SendPropertyChanging();
					this._NotificationMessage = value;
					this.SendPropertyChanged("NotificationMessage");
					this.OnNotificationMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime NotificationDateTime
		{
			get
			{
				return this._NotificationDateTime;
			}
			set
			{
				if ((this._NotificationDateTime != value))
				{
					this.OnNotificationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._NotificationDateTime = value;
					this.SendPropertyChanged("NotificationDateTime");
					this.OnNotificationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NotificationType
		{
			get
			{
				return this._NotificationType;
			}
			set
			{
				if ((this._NotificationType != value))
				{
					this.OnNotificationTypeChanging(value);
					this.SendPropertyChanging();
					this._NotificationType = value;
					this.SendPropertyChanged("NotificationType");
					this.OnNotificationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationLink", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NotificationLink
		{
			get
			{
				return this._NotificationLink;
			}
			set
			{
				if ((this._NotificationLink != value))
				{
					this.OnNotificationLinkChanging(value);
					this.SendPropertyChanging();
					this._NotificationLink = value;
					this.SendPropertyChanged("NotificationLink");
					this.OnNotificationLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSeen", DbType="Bit NOT NULL")]
		public bool IsSeen
		{
			get
			{
				return this._IsSeen;
			}
			set
			{
				if ((this._IsSeen != value))
				{
					this.OnIsSeenChanging(value);
					this.SendPropertyChanging();
					this._IsSeen = value;
					this.SendPropertyChanged("IsSeen");
					this.OnIsSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt")]
		public System.Nullable<long> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblNotification", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblNotifications.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblNotifications.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSession")]
	public partial class tblSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionID;
		
		private System.DateTime _SessionBegin;
		
		private System.Nullable<System.DateTime> _SessionEnd;
		
		private long _UserID;
		
		private double _SessionLatitude;
		
		private double _SessionLongitude;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnSessionBeginChanging(System.DateTime value);
    partial void OnSessionBeginChanged();
    partial void OnSessionEndChanging(System.Nullable<System.DateTime> value);
    partial void OnSessionEndChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnSessionLatitudeChanging(double value);
    partial void OnSessionLatitudeChanged();
    partial void OnSessionLongitudeChanging(double value);
    partial void OnSessionLongitudeChanged();
    #endregion
		
		public tblSession()
		{
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionBegin", DbType="DateTime NOT NULL")]
		public System.DateTime SessionBegin
		{
			get
			{
				return this._SessionBegin;
			}
			set
			{
				if ((this._SessionBegin != value))
				{
					this.OnSessionBeginChanging(value);
					this.SendPropertyChanging();
					this._SessionBegin = value;
					this.SendPropertyChanged("SessionBegin");
					this.OnSessionBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> SessionEnd
		{
			get
			{
				return this._SessionEnd;
			}
			set
			{
				if ((this._SessionEnd != value))
				{
					this.OnSessionEndChanging(value);
					this.SendPropertyChanging();
					this._SessionEnd = value;
					this.SendPropertyChanged("SessionEnd");
					this.OnSessionEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionLatitude", DbType="Float NOT NULL")]
		public double SessionLatitude
		{
			get
			{
				return this._SessionLatitude;
			}
			set
			{
				if ((this._SessionLatitude != value))
				{
					this.OnSessionLatitudeChanging(value);
					this.SendPropertyChanging();
					this._SessionLatitude = value;
					this.SendPropertyChanged("SessionLatitude");
					this.OnSessionLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionLongitude", DbType="Float NOT NULL")]
		public double SessionLongitude
		{
			get
			{
				return this._SessionLongitude;
			}
			set
			{
				if ((this._SessionLongitude != value))
				{
					this.OnSessionLongitudeChanging(value);
					this.SendPropertyChanging();
					this._SessionLongitude = value;
					this.SendPropertyChanged("SessionLongitude");
					this.OnSessionLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblSession", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblSessions.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblSessions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private string _UserFName;
		
		private string _UserLName;
		
		private string _UserEmail;
		
		private string _UserPassword;
		
		private string _UserContact;
		
		private string _UserProof;
		
		private string _UserAddress;
		
		private bool _IsVerified;
		
		private bool _IsVisible;
		
		private System.DateTime _UserRegDateTime;
		
		private int _UserTypeID;
		
		private EntitySet<tblComplaint> _tblComplaints;
		
		private EntitySet<tblEmergency> _tblEmergencies;
		
		private EntitySet<tblFeedback> _tblFeedbacks;
		
		private EntitySet<tblNotification> _tblNotifications;
		
		private EntitySet<tblSession> _tblSessions;
		
		private EntityRef<tblUserType> _tblUserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnUserFNameChanging(string value);
    partial void OnUserFNameChanged();
    partial void OnUserLNameChanging(string value);
    partial void OnUserLNameChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserContactChanging(string value);
    partial void OnUserContactChanged();
    partial void OnUserProofChanging(string value);
    partial void OnUserProofChanged();
    partial void OnUserAddressChanging(string value);
    partial void OnUserAddressChanged();
    partial void OnIsVerifiedChanging(bool value);
    partial void OnIsVerifiedChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    partial void OnUserRegDateTimeChanging(System.DateTime value);
    partial void OnUserRegDateTimeChanged();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    #endregion
		
		public tblUser()
		{
			this._tblComplaints = new EntitySet<tblComplaint>(new Action<tblComplaint>(this.attach_tblComplaints), new Action<tblComplaint>(this.detach_tblComplaints));
			this._tblEmergencies = new EntitySet<tblEmergency>(new Action<tblEmergency>(this.attach_tblEmergencies), new Action<tblEmergency>(this.detach_tblEmergencies));
			this._tblFeedbacks = new EntitySet<tblFeedback>(new Action<tblFeedback>(this.attach_tblFeedbacks), new Action<tblFeedback>(this.detach_tblFeedbacks));
			this._tblNotifications = new EntitySet<tblNotification>(new Action<tblNotification>(this.attach_tblNotifications), new Action<tblNotification>(this.detach_tblNotifications));
			this._tblSessions = new EntitySet<tblSession>(new Action<tblSession>(this.attach_tblSessions), new Action<tblSession>(this.detach_tblSessions));
			this._tblUserType = default(EntityRef<tblUserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserFName
		{
			get
			{
				return this._UserFName;
			}
			set
			{
				if ((this._UserFName != value))
				{
					this.OnUserFNameChanging(value);
					this.SendPropertyChanging();
					this._UserFName = value;
					this.SendPropertyChanged("UserFName");
					this.OnUserFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserLName
		{
			get
			{
				return this._UserLName;
			}
			set
			{
				if ((this._UserLName != value))
				{
					this.OnUserLNameChanging(value);
					this.SendPropertyChanging();
					this._UserLName = value;
					this.SendPropertyChanged("UserLName");
					this.OnUserLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserContact", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserContact
		{
			get
			{
				return this._UserContact;
			}
			set
			{
				if ((this._UserContact != value))
				{
					this.OnUserContactChanging(value);
					this.SendPropertyChanging();
					this._UserContact = value;
					this.SendPropertyChanged("UserContact");
					this.OnUserContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProof", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserProof
		{
			get
			{
				return this._UserProof;
			}
			set
			{
				if ((this._UserProof != value))
				{
					this.OnUserProofChanging(value);
					this.SendPropertyChanging();
					this._UserProof = value;
					this.SendPropertyChanged("UserProof");
					this.OnUserProofChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserAddress
		{
			get
			{
				return this._UserAddress;
			}
			set
			{
				if ((this._UserAddress != value))
				{
					this.OnUserAddressChanging(value);
					this.SendPropertyChanging();
					this._UserAddress = value;
					this.SendPropertyChanged("UserAddress");
					this.OnUserAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVerified", DbType="Bit NOT NULL")]
		public bool IsVerified
		{
			get
			{
				return this._IsVerified;
			}
			set
			{
				if ((this._IsVerified != value))
				{
					this.OnIsVerifiedChanging(value);
					this.SendPropertyChanging();
					this._IsVerified = value;
					this.SendPropertyChanged("IsVerified");
					this.OnIsVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRegDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime UserRegDateTime
		{
			get
			{
				return this._UserRegDateTime;
			}
			set
			{
				if ((this._UserRegDateTime != value))
				{
					this.OnUserRegDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UserRegDateTime = value;
					this.SendPropertyChanged("UserRegDateTime");
					this.OnUserRegDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", DbType="Int NOT NULL")]
		public int UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					if (this._tblUserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblComplaint", Storage="_tblComplaints", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblComplaint> tblComplaints
		{
			get
			{
				return this._tblComplaints;
			}
			set
			{
				this._tblComplaints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblEmergency", Storage="_tblEmergencies", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblEmergency> tblEmergencies
		{
			get
			{
				return this._tblEmergencies;
			}
			set
			{
				this._tblEmergencies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblFeedback", Storage="_tblFeedbacks", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblFeedback> tblFeedbacks
		{
			get
			{
				return this._tblFeedbacks;
			}
			set
			{
				this._tblFeedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblNotification", Storage="_tblNotifications", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblNotification> tblNotifications
		{
			get
			{
				return this._tblNotifications;
			}
			set
			{
				this._tblNotifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblSession", Storage="_tblSessions", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblSession> tblSessions
		{
			get
			{
				return this._tblSessions;
			}
			set
			{
				this._tblSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUserType_tblUser", Storage="_tblUserType", ThisKey="UserTypeID", OtherKey="UserTypeID", IsForeignKey=true)]
		public tblUserType tblUserType
		{
			get
			{
				return this._tblUserType.Entity;
			}
			set
			{
				tblUserType previousValue = this._tblUserType.Entity;
				if (((previousValue != value) 
							|| (this._tblUserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUserType.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._tblUserType.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._UserTypeID = value.UserTypeID;
					}
					else
					{
						this._UserTypeID = default(int);
					}
					this.SendPropertyChanged("tblUserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblComplaints(tblComplaint entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblComplaints(tblComplaint entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblEmergencies(tblEmergency entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblEmergencies(tblEmergency entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblFeedbacks(tblFeedback entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblFeedbacks(tblFeedback entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblNotifications(tblNotification entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblNotifications(tblNotification entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblSessions(tblSession entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblSessions(tblSession entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
	}
}
#pragma warning restore 1591
